package bls

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestHashToG1(t *testing.T) {
	tests := [][3]string{
		// cases generated by golang
		{"", "0x07d6361970af1d68e10e2ee74ee851bcd33d23ea24a95f9b474207c128aca6b0", "0x2f71ec16d76213fa8929353cb258bfd10ff486ab60235e4646d0615bb2e3ebd5"},
		{"test", "0x0be7bfb307a4c44d894f21b6ca7e62038d33ca1217976355ebdeaecab65c5c65", "0x0592706fe86d1907e547440f171a8ce75fbe56690e3e5b326a6a04823959bc6c"},
		{"01234567890", "0x0d1d734b265476ca53d0ace6c19e4b517ebf77ed9fdd4fd8e6748825a209d69c", "0x298de683a796279ddd058dd437d5e5f66d057570bd1ff2f81eaa42194140e677"},
		{"abcd-efgh...xyz...ABCD...!", "0x0625543b0c8c7ab770932220485b44abc75d8485ec0d39f8382925d692fa5738", "0x0e4d6a68eda6f9eae1f4ad9119824e5196237f39c024a55e69d8b6a515495c72"},
		{"func TestHashToG1(t *testing.T) { }", "0x0d73cce6478efecab9d9871ed7aa869abeed5514a493d3eb0e746e580eb98d8f", "0x1d2695f881ce4499b2d4e2d181f386b9b6a7ccfcbeaef5583d3bc9c7ba02ac83"},
		{"测试 hashToG1.", "0x2eb70a38c822a2cbd459f712a04935356c6ba63817d9298ed352259c5782b172", "0x248d3971c6ed1286feaeede14861de0a7de52ff3f649c203efec4d8b36f059b8"},
		// cases generated by contract
		{"test case generated by contract - 1.", "0x2D1AED1EFBF0FD46C12498513388EC99AAC03652B65B9E67F660814D7E6F919A", "0x1D65D72002C386BD3AAB3F18D1DC3015F0C5B52A70BB4590AA074203953A16B"},
		{"yet, another test case generated by contract.", "0x206988A402144D8A90A72939E213A529E05EAF96E5077D2C360F692423DFBE87", "0x83BCF6B5A4CD4212C0EE551CC238BBF77E884E71960DB3073F7E5133F9C311E"},
		{"contract test case 3. 333333333333333333333333333333333", "0x2005D11B687DF632E1E4D60815641804990F4787621217FBB28515FDB8CE01B9", "0x302170202135966BEF70F39FB871975ACF3CD29326F137180B0D9F2F91FFB0E"},
		{"forth contract test case, At7Kgh7eQdSs5 0x0000000000000000000000000000000000000000", "0x10A7E5921C0332DAECEF479FA975E16C57048975A2ADBFA26B5E1241347701D4", "0x207F862335E3F877ABB5CCF61C2189FF57C3B1753D6F1E3544A10750F675371A"},
	}
	for _, tt := range tests {
		msg, x, y := tt[0], tt[1], tt[2]
		p := HashToG1([]byte(msg))
		// t.Logf(PointToStringG1(p))
		p.Marshal()
		x1, y1 := PointToInt1(p)
		assert.Equal(t, bigFromBase16(x).Text(16), x1.Text(16))
		assert.Equal(t, bigFromBase16(y).Text(16), y1.Text(16))
	}
}
